/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT 0
#define QWERTY 1
#define NUM 2
#define NAV 3
#define FUN 4

&lt {
    tapping-term-ms = <240>;
    quick-tap-ms = <150>;
    require-prior-idle-ms = <10>;
    flavor = "tap-preferred";
};

&mt {
    tapping-term-ms = <250>;
    require-prior-idle-ms = <250>;
    flavor = "tap-preferred";
};

/ {
    conditional_layers { compatible = "zmk,conditional-layers"; };

    combos {
        compatible = "zmk,combos";

        combo_esc {
            bindings = <&kp ESC>;
            key-positions = <0 1>;
        };

        combo_capture_screen {
            bindings = <&kp LS(LC(LG(NUMBER_4)))>;
            key-positions = <0 1 2>;
        };

        combo_caps {
            bindings = <&kp CAPSLOCK>;
            key-positions = <14 15>;
        };

        combo_left {
            bindings = <&kp LEFT_ARROW>;
            key-positions = <27 26>;
        };

        combo_right {
            bindings = <&kp RIGHT>;
            key-positions = <28 27>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            bindings = <
  &kp Q           &kp W           &kp E         &kp R             &kp T    &kp Y      &kp U          &kp I        &kp O           &kp P
  &mt LEFT_GUI A  &mt LEFT_ALT S  &mt LCTRL D   &mt LEFT_SHIFT F  &kp G    &kp H      &mt RSHIFT J   &mt RCTRL K  &mt LEFT_ALT L  &mt RGUI SEMI
  &lt 2 Z         &kp X           &kp C         &kp V             &kp B    &kp N      &kp M          &kp COMMA    &kp DOT         &lt 4 SLASH
                                  &kp LEFT_GUI  &kp SPACE         &sl 1    &kp ENTER  &kp BACKSPACE  &sl 3
            >;
        };

        Dvorak_DeadState {
            bindings = <
  &kp TILDE   &kp KP_PLUS   &kp N3  &kp N4     &kp MINUS      &kp PLUS   &kp LS(RBKT)   &kp LS(Q)     &kp GRAVE        &kp BACKSLASH
  &kp LS(N1)  &kp KP_MINUS  &kp N5  &kp N8     &kp N1         &kp N1     &kp LS(Z)      &kp RBKT      &kp KP_MULTIPLY  &kp SLASH
  &none       &kp EQUAL     &kp N2  &kp N0     &kp LS(SQT)    &kp PIPE   &kp Z          &kp LS(LBKT)  &trans           &trans
                            &to 0   &kp SPACE  &to 0          &kp ENTER  &kp BACKSPACE  &to 0
            >;
        };

        num_layer {
            bindings = <
  &kp TILDE  &kp AT    &kp LBRC  &kp RBRC  &kp PRCNT    &kp KP_MULTIPLY  &kp N7  &kp N8  &kp N9  &kp MINUS
  &kp CARET  &kp HASH  &kp LPAR  &kp RPAR  &kp DLLR     &kp KP_DIVIDE    &kp N4  &kp N5  &kp N6  &kp PLUS
  &none      &kp LT    &kp LBKT  &kp RBKT  &kp GT       &kp KP_DOT       &kp N1  &kp N2  &kp N3  &kp EQUAL
                       &trans    &trans    &trans       &kp N0           &trans  &trans
            >;
        };

        nav_layer {
            bindings = <
  &kp TAB         &none    &none     &none      &none      &none   &kp HOME         &kp END    &kp TAB       &none
  &kp LEFT        &kp UP   &kp DOWN  &kp RIGHT  &kp TAB    &gresc  &sk RIGHT_SHIFT  &sk RCTRL  &sk LEFT_ALT  &sk RIGHT_GUI
  &sk LEFT_SHIFT  &kp DEL  &none     &none      &none      &none   &kp RET          &none      &none         &none
                           &none     &none      &none      &none   &none            &none
            >;
        };

        fun_layer {
            bindings = <
  &none         &kp K_MUTE    &kp C_VOL_DN  &kp C_VOL_UP  &out OUT_TOG    &trans  &kp F7  &kp F8  &kp F9  &kp F12
  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &kp F4  &kp F5  &kp F6  &kp F11
  &bt BT_CLR    &kp C_PREV    &kp C_PP      &kp C_NEXT    &trans          &trans  &kp F1  &kp F2  &kp F3  &kp F10
                              &trans        &trans        &trans          &trans  &trans  &trans
            >;
        };
    };
};
