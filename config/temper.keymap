/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>

#define DEFAULT 0
#define QWERTY 1
#define NUM 2
#define NAV 3
#define FUN 4

&lt {
    tapping-term-ms = <240>;
    quick-tap-ms = <150>;
    require-prior-idle-ms = <10>;
    flavor = "tap-preferred";
};

&mt {
    tapping-term-ms = <250>;
    require-prior-idle-ms = <250>;
    flavor = "tap-preferred";
};

/ {
    conditional_layers { compatible = "zmk,conditional-layers"; };

    behaviors {
        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };

        super_bspc: super_backspace {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp LA(BACKSPACE)>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ctrltab: ctrltab {
            compatible = "zmk,behavior-mod-morph";
            label = "CTRLTAB";
            bindings = <&kp LCTRL>, <&kp TAB>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };

        grave_escape: grave_escape {
            compatible = "zmk,behavior-mod-morph";
            label = "GRAVE_ESCAPE";
            bindings = <&kp ESC>, <&kp GRAVE>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };

        ctrl_guialttab: ctrl_guialttab {
            compatible = "zmk,behavior-mod-morph";
            label = "CTRL_GUIALTTAB";
            bindings = <&kp LCTRL>, <&kp TAB>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_LGUI)>;
            keep-mods = <(MOD_LALT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_esc {
            bindings = <&gresc>;
            key-positions = <0 1>;
        };

        combo_capture_screen {
            bindings = <&kp LS(LC(LG(NUMBER_4)))>;
            key-positions = <0 1 2>;
        };

        combo_left {
            bindings = <&kp LEFT_ARROW>;
            key-positions = <27 26>;
        };

        combo_right {
            bindings = <&kp RIGHT>;
            key-positions = <28 27>;
        };

        combo_down {
            bindings = <&kp DOWN>;
            key-positions = <1 2>;
        };

        combo_up {
            bindings = <&kp UP>;
            key-positions = <7 8>;
        };

        combo_right2 {
            bindings = <&kp RIGHT>;
            key-positions = <22 23>;
        };

        combo_left2 {
            bindings = <&kp LEFT>;
            key-positions = <21 22>;
        };
    };

    macros {
        marco_arrow_right: marco_arrow_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "MARCO_ARROW_RIGHT";
        };

        marco_arrow_right_d: marco_arrow_right_d {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp KP_MINUS &kp LS(E)>;
            label = "MARCO_ARROW_RIGHT_D";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            bindings = <
  &kp Q           &kp W             &kp E         &kp R             &kp T    &kp Y      &kp U         &kp I        &kp O           &kp P
  &mt LEFT_GUI A  &mt LEFT_ALT S    &mt LCTRL D   &mt LEFT_SHIFT F  &kp G    &kp H      &mt RSHIFT J  &mt RCTRL K  &mt LEFT_ALT L  &mt RGUI SEMI
  &lt 3 Z         &mt LEFT_SHIFT X  &kp C         &kp V             &kp B    &kp N      &kp M         &kp COMMA    &kp DOT         &lt 5 SLASH
                                    &kp LEFT_WIN  &lt 6 SPACE       &sl 2    &kp ENTER  &super_bspc   &lt 4 RIGHT
            >;
        };

        DeadState_v2 {
            bindings = <
  &kp AMPS     &kp LBKT  &kp LBRC           &kp RBRC            &kp LPAR          &kp EQUAL  &kp STAR       &kp RPAR      &kp PLUS    &kp RBKT
  &kp TILDE    &kp AT    &kp LT             &kp GT              &kp MINUS         &kp GRAVE  &kp DQT        &kp COLON     &kp DOLLAR  &kp SLASH
  &kp PERCENT  &kp HASH  &kp DOUBLE_QUOTES  &marco_arrow_right  &kp UNDERSCORE    &kp PIPE   &kp EXCL       &kp QUESTION  &kp CARET   &kp BACKSLASH
                         &to 0              &kp SPACE           &sk LEFT_SHIFT    &kp TAB    &kp BACKSPACE  &to 0
            >;
        };

        Dvorak_DeadState_v2 {
            bindings = <
  &kp N1      &kp N2     &kp N3        &kp N4                &kp N5            &kp N6    &kp N7       &kp N8        &kp N9        &kp N0
  &kp TILDE   &kp RBKT   &kp LS(W)     &kp LS(E)             &kp KP_MINUS      &kp PLUS  &kp LS(Z)    &kp LS(Q)     &kp GRAVE     &kp LEFT_BRACKET
  &kp LS(N1)  &kp EQUAL  &kp LS(Z)     &marco_arrow_right_d  &kp LS(SQT)       &kp PIPE  &kp MINUS    &kp LS(LBKT)  &kp LS(RBKT)  &kp BACKSLASH
                         &kp LEFT_ALT  &kp SPACE             &sk LEFT_SHIFT    &kp TAB   &kp LS(TAB)  &kp LEFT_WIN
            >;
        };

        num_layer {
            bindings = <
  &kp LS(N1)      &kp KP_N7     &kp KP_N5     &kp KP_N3       &kp KP_NUMBER_1    &kp KP_N9      &kp KP_N0      &kp KP_N2         &kp KP_N4         &kp KP_N6
  &kp LEFT_ARROW  &kp UP_ARROW  &kp DOWN      &kp RIGHT       &kp KP_NUMLOCK     &kp KP_DIVIDE  &kp KP_N4      &kp LA(LG(LBKT))  &kp LA(LG(RBKT))  &kp KP_N8
  &none           &kp LCTRL     &none         &kp LS(DELETE)  &kp DELETE         &kp KP_DOT     &kp KP_N1      &kp KP_N2         &kp KP_N3         &kp KP_EQUAL
                                &kp LEFT_GUI  &kp SPACE       &to 0              &kp KP_N0      &kp BACKSPACE  &to 4
            >;
        };

        nav_layer {
            bindings = <
  &kp F1           &kp F2  &kp F3        &kp F4      &kp F5        &kp F6             &kp F7      &kp F8   &kp MINUS  &kp PLUS
  &ctrl_guialttab  &kp N1  &kp N2        &kp N3      &kp N4        &kp LA(LG(LEFT))   &kp F9      &kp F10  &kp F11    &kp F12
  &kp LEFT_SHIFT   &none   &none         &kp LG(N1)  &kp LG(N2)    &kp LA(LG(RIGHT))  &none       &none    &kp LEFT   &kp RIGHT
                           &kp LEFT_WIN  &kp SPACE   &none         &trans             &kp DELETE  &none
            >;
        };

        fun_layer {
            bindings = <
  &kp TAB       &kp GRAVE     &kp C_VOL_DN  &kp C_VOL_UP  &out OUT_TOG             &kp F10            &kp F7           &kp F8             &kp F9  &kp F12
  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_CLR               &kp LG(LA(LEFT))   &kp F4           &kp F5             &kp F6  &kp F11
  &kp LS(TAB)   &kp C_PREV    &kp C_PP      &kp C_NEXT    &kp LG(LA(BACKSLASH))    &kp LG(LA(RIGHT))  &kp F1           &kp F2             &kp F3  &none
                              &kp LEFT_GUI  &kp LEFT_ALT  &kp LG(LA(BACKSLASH))    &kp LG(LA(COMMA))  &kp LG(LA(DOT))  &kp LG(LA(SLASH))
            >;
        };

        mouse_move {
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &trans  &mkp LCLK       &mmv MOVE_UP    &mkp RCLK        &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans          &msc SCRL_UP    &msc SCRL_DOWN   &trans
                  &trans  &trans  &trans    &trans  &trans          &trans
            >;
        };
    };
};
